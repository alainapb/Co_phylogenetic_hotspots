}
plot(x=t0:tmax, y=n, type='l')
r<- 2.4
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 2.5
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 2.56
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 2.57
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 2.6
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 3
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
K <- 10
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 2
K <- 10
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
tmax <- 500
n0 <- 1 ## initial population size
## set up storage
store <- array(NA, dim=c(50,length(seq(1,3,0.01))))
for (j in 1:length(seq(1,3,0.01))) {
r <- seq(1,3,0.01)[j]
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
## store the final 50 timepoints in column j
store[,j] <- tail(n,50)
}
plot(x=t0:tmax, y=n, type='l')
head(store)
plot.new()
plot.window(xlim=c(1,3), ylim=range(store))
axis(1); axis(2); box('plot')
for (j in 1:ncol(store)) {
points(rep(seq(1,3,0.01)[j],50), store[,j], pch=0.1)
}
plot.new()
plot.window(xlim=c(1,3), ylim=range(store))
axis(1); axis(2); box('plot')
for (j in 1:ncol(store)) {
points(rep(seq(1,3,0.01)[j],50), store[,j], pch=21, bg=1, cex=0.1)
}
## specify initial variable conditions
y <- c(n=1)
## specify the parameters
pars <- c(r=0.1, K=50)
## times to record
times <- seq(t0,tmax,1)
out <- ode(y=y, times=times, func=contExp, parms=pars, method="lsoda")
library(deSolve)
out <- ode(y=y, times=times, func=contExp, parms=pars, method="lsoda")
contLog <- function(t, y, pars) {
## pull out meaningful variable names
n <- y["n"]
## pull out meaningful parameter names
r <- pars["r"] ##
K <- pars["K"] ##
## differential equations
dndt <- r*n*(1-n/K)
return(list(c(dndt)))
}
out <- ode(y=y, times=times, func=contLog, parms=pars, method="lsoda")
conditions
plot(x=out[,"time"], y=out[,"n"], type='l')
## specify the parameters
pars <- c(r=0.01, K=50)
## times to record
times <- seq(t0,tmax,1)
out <- ode(y=y, times=times, func=contLog, parms=pars, method="lsoda")
plot(x=out[,"time"], y=out[,"n"], type='l')
## specify the parameters
pars <- c(r=1, K=50)
## times to record
times <- seq(t0,tmax,1)
out <- ode(y=y, times=times, func=contLog, parms=pars, method="lsoda")
plot(x=out[,"time"], y=out[,"n"], type='l')
## Discrete time logistic model
## n(t+1) = n(t) + b*n(t)*(1-n(t)/K)
t0 <- 0 ## initial time
tmax <- 100 ## final time
n0 <- 1 ## initial population size
r <- 0.1 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 0.01 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 1 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 1.5 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 1.7 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 2 ## per-capita growth rate
K <- 50
n0 <- 1 ## initial population size
r <- 2 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 2.2 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 2.49 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 2.5 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 2.56 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 2.565 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 2.7 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 3 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
n0 <- 1.001 ## initial population size
r <- 3 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
## specify the parameters
pars <- c(r=3, K=50)
## times to record
times <- seq(t0,tmax,1)
out <- ode(y=y, times=times, func=contLog, parms=pars, method="lsoda")
plot(x=out[,"time"], y=out[,"n"], type='l')
## Bifurcation diagram- how do dynamics change as you change a single parameter
tmax <- 500
n0 <- 1 ## initial population size
## set up storage
store <- array(NA, dim=c(50,length(seq(1,3,0.01))))
for (j in 1:length(seq(1,3,0.01))) {
r <- seq(1,3,0.01)[j]
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
## store the final 50 timepoints in column j
store[,j] <- tail(n,50)
}
plot.new()
plot.window(xlim=c(1,3), ylim=range(store))
axis(1); axis(2); box('plot')
for (j in 1:ncol(store)) {
points(rep(seq(1,3,0.01)[j],50), store[,j], pch=21, bg=1, cex=0.1)
}
setwd("~/Co_phylogenetic_hotspots")
knitr::opts_chunk$set(echo = TRUE,
dev=c('png','tiff'),
fig.path='figures/')
library(MCMCglmm, quietly = TRUE, warn.conflicts=FALSE)
library(gdata, quietly = TRUE, warn.conflicts=FALSE)
library(igraph, quietly = TRUE, warn.conflicts=FALSE)
library(phytools, quietly = TRUE, warn.conflicts=FALSE)
library(tidyverse, quietly = TRUE, warn.conflicts=FALSE)
library(parallel, quietly = TRUE, warn.conflicts=FALSE)
gmpd_mam_tree <- read.tree("mammal_tree_clean.tre")
gmpd_para_tree <- read.tree("helminth_tree_clean.tre")
###############################
##  Format the GMPD Data     ##
###############################
data <- read.csv("GMPD_clean.csv")
## create a new data.frame with all possible host-parasite combinations
expand.grid(Host.species=(data$HostCorrectedName %>% unique),
Parasite.species=(data$ParasiteCorrectedName %>% unique)) -> ndata
## ncount = the number of times that each association occurs in data
## presence = incidence data (0/1 if the association occurs or not)
## nhosts.sampled = the number of times each host occurs in the GMPD
## nparas.sampled = the number of times each parasite occurs in the GMPD
mutate(ndata,
ncount=left_join(ndata, data %>% count(HostCorrectedName,ParasiteCorrectedName),
by=c("Host.species"="HostCorrectedName","Parasite.species"="ParasiteCorrectedName"))$n,
presence=ifelse(is.na(ncount),0,1),
nhosts.sampled=left_join(ndata, data %>% count(HostCorrectedName),
by=c("Host.species"="HostCorrectedName"))$n,
nparas.sampled=left_join(ndata, data %>% count(ParasiteCorrectedName),
by=c("Parasite.species"="ParasiteCorrectedName"))$n) -> gmpd_ndata
##################################
##      Primate-only data       ##
##################################
pdata <- subset(data, HostOrder=="Primates")
## prune the phylogenies to include only this data
primate_tree <- keep.tip(gmpd_mam_tree, gsub(" ","_",unique(pdata$HostCorrectedName)))
primate_para_tree <- keep.tip(gmpd_para_tree, gsub(" ","_",unique(pdata$ParasiteCorrectedName)))
## create a new data.frame with all possible host-parasite combinations
expand.grid(Host.species=(pdata$HostCorrectedName %>% unique),
Parasite.species=(pdata$ParasiteCorrectedName %>% unique)) -> primate_ndata
mutate(primate_ndata,
ncount=left_join(primate_ndata, pdata %>% count(HostCorrectedName,ParasiteCorrectedName),
by=c("Host.species"="HostCorrectedName","Parasite.species"="ParasiteCorrectedName"))$n,
presence=ifelse(is.na(ncount),0,1),
nhosts.sampled=left_join(primate_ndata, pdata %>% count(HostCorrectedName),
by=c("Host.species"="HostCorrectedName"))$n,
nparas.sampled=left_join(primate_ndata, pdata %>% count(ParasiteCorrectedName),
by=c("Parasite.species"="ParasiteCorrectedName"))$n) -> primate_ndata
primate_ndata$Host.species <- as.factor(as.character(primate_ndata$Host.species))
primate_ndata$Parasite.species <- as.factor(as.character(primate_ndata$Parasite.species))
##############################
##      Nearctic data       ##
##############################
## Load the trees
nearctic_mam_tree <- read.tree("nearctic_mammal_tree_clean.tre")
nearctic_para_tree <- read.tree("nearctic_helminth_tree_clean.tre")
## Load the data
nearctic_data <- read.csv("nearctic_data_clean.csv")
expand.grid(Host.species=(nearctic_data$Host %>% unique),
Parasite.species=(nearctic_data$Parasite %>% unique)) -> nearctic_ndata
mutate(nearctic_ndata,
ncount=left_join(nearctic_ndata, nearctic_data %>% count(Host,Parasite),
by=c("Host.species"="Host","Parasite.species"="Parasite"))$n,
presence=ifelse(is.na(ncount),0,1),
nhosts.sampled=left_join(nearctic_ndata, nearctic_data %>% count(Host),
by=c("Host.species"="Host"))$n,
nparas.sampled=left_join(nearctic_ndata, nearctic_data %>% count(Parasite),
by=c("Parasite.species"="Parasite"))$n) -> nearctic_ndata
dataset <- "GMPD"
mam_tree <- gmpd_mam_tree
para_tree <- gmpd_para_tree
ndata <- gmpd_ndata
ht<-vcv(mam_tree, corr=T)
pt<-vcv(para_tree, corr=T)
# incidence data
Y<-table(ndata$Host.species, ndata$Parasite.species, ndata$presence)[,,2]>0
## change names to match the phylogeny
rownames(Y) <- gsub(" ", "_", rownames(Y))
colnames(Y) <- gsub(" ", "_", colnames(Y))
## reorder A matrices so match row/columns of Y
hi<-match(rownames(Y), rownames(ht))
pi<-match(colnames(Y), rownames(pt))
ht<-ht[hi,hi]
pt<-pt[pi,pi]
## get unnormalised eigenvectors of phylogenetic distance matrix
hte<-t(t(eigen(solve(ht))$vectors)*sqrt(eigen(solve(ht))$values))
pte<-t(t(eigen(solve(pt))$vectors)*sqrt(eigen(solve(pt))$values))
iD<-t(hte)%*%(Y-mean(Y))%*%pte
## MSEb metric of Ives & Godfray under Brownian motion (see Appendix of Hadfield et al. 2014)
MSEbrown <- sum(diag(t(iD)%*%iD))
## ASIDE: Verify/test whether this is the same as the MSEb metric calculated using the code in picante
## The following comes from the code in pblm.R
## Note that it is not the same, but Hadfield et al. 2014 note that ci should actually only be *proportional* to MSEb, not necessarily identical to it.
# A<-as.matrix(as.vector(as.matrix(Y)))
# U<-rep(1,length(A))
# invV <- kronecker(chol2inv(chol(as.matrix(pt))),chol2inv(chol(as.matrix(ht))))
# abase<-solve((t(U)%*%invV%*%U),((t(U)%*%invV%*%A)))
# MSEBase<-(t(A-U%*%abase)%*%invV%*%(A-U%*%abase))/(length(A)-1)
## MSEstar metric of Ives & Godfray under a star phylogeny (see code for pblm.R)
MSEstar<-cov(as.matrix(as.vector(Y-mean(Y)))) %>% as.numeric()
MSEstar
Y2<-apply(Y, 2, sample)                     # Legendre permtations
mean(Y)
mean(Y2)
cov(as.matrix(as.vector(Y-mean(Y))))
cov(as.matrix(as.vector(Y2-mean(Y2))))
a = readRDS("IvesGodfray_simplified_results.RDS")
a
ives_results <- array(NA, dim=c(6,6))
colnames(ives_results) <- c("dataset", "model", "value", "L1-pval", "L2-pval", "H-pval")
# matrices for host and parasite based on the branch lengths in the phylogenetic tree
# (Note that differences in tree depth do not matter because of the use of corr=T)
ht<-vcv(mam_tree, corr=T)
pt<-vcv(para_tree, corr=T)
# incidence data
Y<-table(ndata$Host.species, ndata$Parasite.species, ndata$presence)[,,2]>0
## change names to match the phylogeny
rownames(Y) <- gsub(" ", "_", rownames(Y))
colnames(Y) <- gsub(" ", "_", colnames(Y))
## reorder A matrices so match row/columns of Y
hi<-match(rownames(Y), rownames(ht))
pi<-match(colnames(Y), rownames(pt))
ht<-ht[hi,hi]
pt<-pt[pi,pi]
## get unnormalised eigenvectors of phylogenetic distance matrix
hte<-t(t(eigen(solve(ht))$vectors)*sqrt(eigen(solve(ht))$values))
pte<-t(t(eigen(solve(pt))$vectors)*sqrt(eigen(solve(pt))$values))
## D matrix (see Appendix of Hadfield et al. 2014) for Ives & Godfray methods
iD<-t(hte)%*%(Y-mean(Y))%*%pte
## MSEb metric of Ives & Godfray under Brownian motion (see Appendix of Hadfield et al. 2014)
MSEbrown <- sum(diag(t(iD)%*%iD))
## ASIDE: Verify/test whether this is the same as the MSEb metric calculated using the code in picante
## The following comes from the code in pblm.R
## Note that it is not the same, but Hadfield et al. 2014 note that ci should actually only be *proportional* to MSEb, not necessarily identical to it.
# A<-as.matrix(as.vector(as.matrix(Y)))
# U<-rep(1,length(A))
# invV <- kronecker(chol2inv(chol(as.matrix(pt))),chol2inv(chol(as.matrix(ht))))
# abase<-solve((t(U)%*%invV%*%U),((t(U)%*%invV%*%A)))
# MSEBase<-(t(A-U%*%abase)%*%invV%*%(A-U%*%abase))/(length(A)-1)
## MSEstar metric of Ives & Godfray under a star phylogeny (see code for pblm.R)
MSEstar<-cov(as.matrix(as.vector(Y-mean(Y)))) %>% as.numeric()
brown.boot.1<-1:1000
brown.boot.2<-1:1000
brown.boot.3<-1:1000
star.boot.1<-1:1000
star.boot.2<-1:1000
star.boot.3<-1:1000
##################
## Permutations ##
##################
for(j in 1:1000){
print(j)
Y2<-apply(Y, 2, sample)                     # Legendre permtations
iD<-t(hte)%*%(Y2-mean(Y2))%*%pte            # Ives D matrix
brown.boot.1[j]<-sum(diag(t(iD)%*%iD))              # Ives metric (MSEb)
star.boot.1[j] <-cov(as.matrix(as.vector(Y2-mean(Y2)))) %>% as.numeric() # Ives metric MSEstar
Y2<-apply(Y, 1, sample)                     # Legendre permtations
iD<-t(pte)%*%(Y2-mean(Y2))%*%hte            # Ives D matrix
brown.boot.2[j]<-sum(diag(t(iD)%*%iD))              # Ives metric (MSEb)
star.boot.2[j] <-cov(as.matrix(as.vector(Y2-mean(Y2)))) %>% as.numeric() # Ives metric MSEstar
Y2<-Y[sample(1:nrow(Y)),sample(1:ncol(Y))]  # Hommola sampling
iD<-t(hte)%*%(Y2-mean(Y2))%*%pte
brown.boot.3[j]<-sum(diag(t(iD)%*%iD))
star.boot.3[j] <-cov(as.matrix(as.vector(Y2-mean(Y2)))) %>% as.numeric() # Ives metric MSEstar
}
star.boot.1
MSEstar
MSEstar>star.boot.1
sum(MSEstar>star.boot.1)
p = readRDS("IvesGodfray_full_primate.RDS")
p
p$signal.strength
p = readRDS("IvesGodfray_full_nearctic.RDS")
p$signal.strength
library(igraph)
?cluster_walktrap
###############################
##          GMPD Data        ##
###############################
data <- read.csv("GMPDsmall.csv")
data <- read.csv("GMPD_clean.csv")
dim(data)
###############################
##          GMPD Data        ##
###############################
data <- read.csv("GMPDsmall.csv")
dim(data)
data = read.csv("~/host-ghost/data/GMPD_main.csv")
data
head(data)
d2 <- subset(data, ParType=="Helminth")
head(d2)
mutate(d2, ParGenus=strsplit(ParasiteCorrectName, " ")[[1]][1]) -> d2
d2$ParasiteCorrectedName[1]
strsplit(d2$ParasiteCorrectedName[1], " ")
strsplit(d2$ParasiteCorrectedName[1], " ")[[1]][1]
strsplit(d2$ParasiteCorrectedName, " ")[[1]][1]
sapply(d2$ParasiteCorrectedName, function(n) strsplit(n, " ")[[1]][1])
table(sapply(d2$ParasiteCorrectedName, function(n) strsplit(n, " ")[[1]][1]))
table(sapply(d2$ParasiteCorrectedName, function(n) strsplit(n, " ")[[1]][1])) %>% sort
d2$ParGenus = sapply(d2$ParasiteCorrectedName, function(n) strsplit(n, " ")[[1]][1])
subset(d2, ParGenus=="Taenia")
subset(d2, ParGenus=="Taenia")$ParasiteCorrectedName
subset(d2, ParGenus=="Taenia")$ParasiteCorrectedName %>% unique
table(sapply(d2$ParasiteCorrectedName, function(n) strsplit(n, " ")[[1]][1])) %>% sort
subset(d2, ParGenus=="Trichostrongylus")$ParasiteCorrectedName %>% unique
subset(d2, ParGenus=="Trichostrongylus")$ParasiteCorrectedName %>% unique %>% length()
table(sapply(d2$ParasiteCorrectedName, function(n) strsplit(n, " ")[[1]][1])) %>% sort
subset(d2, ParGenus=="Trichuris")$ParasiteCorrectedName %>% unique %>% length()
subset(d2, ParGenus=="Trichinella")$ParasiteCorrectedName %>% unique %>% length()
subset(d2, ParGenus=="Strongyloides")$ParasiteCorrectedName %>% unique %>% length()
subset(d2, ParGenus=="Capillaria")$ParasiteCorrectedName %>% unique %>% length()
gmpd_para_tree$tip.label
gmpd_para_tree$tip.label %>% sort()
table(sapply(d2$ParasiteCorrectedName, function(n) strsplit(n, " ")[[1]][1])) %>% sort
subset(d2, ParGenus=="Ancylostoma")$ParasiteCorrectedName %>% unique %>% length()
sapply(c("Echinococcus", "Taenia", "Trichostrongylus", "Trichuris", "Trichinella", "Strongyloides', "Capillaria", "Oesophagostomum", "Ostertagia", "Cooperia"), function(g) subset(d2, ParGenus==g)$ParasiteCorrectedName %>% unique %>% length())
subset(d2, ParGenus=="Cooperia")$ParasiteCorrectedName %>% unique %>% length()
sapply(c("Echinococcus", "Taenia", "Trichostrongylus", "Trichuris", "Trichinella", "Strongyloides', "Capillaria", "Oesophagostomum", "Ostertagia", "Cooperia"), function(g) subset(d2, ParGenus==g)$ParasiteCorrectedName %>% unique %>% length())
c("Echinococcus", "Taenia", "Trichostrongylus", "Trichuris", "Trichinella", "Strongyloides', "Capillaria", "Oesophagostomum", "Ostertagia", "Cooperia")
sapply(c("Echinococcus", "Taenia", "Trichostrongylus", "Trichuris", "Trichinella", "Strongyloides", "Capillaria", "Oesophagostomum", "Ostertagia", "Cooperia"), function(g) subset(d2, ParGenus==g)$ParasiteCorrectedName %>% unique %>% length())
top_genera = c("Echinococcus", "Taenia", "Trichostrongylus", "Trichuris", "Trichinella", "Strongyloides", "Capillaria", "Oesophagostomum", "Ostertagia", "Cooperia")
gmpd_para_tree
sapply(gmpd_para_tree$tip.label, function(n) strsplit(n, "_")[[1]][1])
table(sapply(gmpd_para_tree$tip.label, function(n) strsplit(n, "_")[[1]][1]))
table(sapply(gmpd_para_tree$tip.label, function(n) strsplit(n, "_")[[1]][1]))
names(table(sapply(gmpd_para_tree$tip.label, function(n) strsplit(n, "_")[[1]][1])))%in%top_genera
which(names(table(sapply(gmpd_para_tree$tip.label, function(n) strsplit(n, "_")[[1]][1])))%in%top_genera)
table(sapply(gmpd_para_tree$tip.label, function(n) strsplit(n, "_")[[1]][1]))[which(names(table(sapply(gmpd_para_tree$tip.label, function(n) strsplit(n, "_")[[1]][1])))%in%top_genera)]
table(sapply(gmpd_para_tree$tip.label, function(n) strsplit(n, "_")[[1]][1]))[which(names(table(sapply(gmpd_para_tree$tip.label, function(n) strsplit(n, "_")[[1]][1])))%in%top_genera)] %>% sum()
sapply(c("Echinococcus", "Taenia", "Trichostrongylus", "Trichuris", "Trichinella", "Strongyloides", "Capillaria", "Oesophagostomum", "Ostertagia", "Cooperia"), function(g) subset(d2, ParGenus==g)$ParasiteCorrectedName %>% unique %>% length())
sapply(c("Echinococcus", "Taenia", "Trichostrongylus", "Trichuris", "Trichinella", "Strongyloides", "Capillaria", "Oesophagostomum", "Ostertagia", "Cooperia"), function(g) subset(d2, ParGenus==g)$ParasiteCorrectedName %>% unique %>% length()) %>% sum
sapply(c("Echinococcus", "Taenia", "Trichostrongylus", "Trichuris", "Trichinella", "Strongyloides", "Capillaria", "Oesophagostomum", "Ostertagia", "Cooperia"), function(g) subset(d2, ParGenus==g)$ParasiteCorrectedName %>% unique %>% length())
table(sapply(gmpd_para_tree$tip.label, function(n) strsplit(n, "_")[[1]][1]))[which(names(table(sapply(gmpd_para_tree$tip.label, function(n) strsplit(n, "_")[[1]][1])))%in%top_genera)]
